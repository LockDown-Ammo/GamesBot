{
  "version": 3,
  "sources": ["../../../src/games/ttt.ts"],
  "sourcesContent": ["import Discord,{ CacheType, Interaction, MessageActionRow, MessageEmbed, User } from \"discord.js\";\nimport GameBase from \"../classes/gameBase\";\nimport { GameContent } from \"../interfaces/gameContent\";\nimport GameResult, { ResultType } from \"../interfaces/gameResult\";\n\n\nconst { MessageButtonStyles, MessageComponentTypes } = Discord.Constants\nconst NO_MOVE = 0;\nconst PLAYER_1 = 1;\nconst PLAYER_2 = 2;\n\nexport default class TicTacToe extends GameBase {\n    private gameBoard: number[][] = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    private won: boolean = false;\n    constructor() {\n        super('tictactoe', true);\n    }\n\n    protected getContent(): GameContent {\n        const embed = new MessageEmbed()\n            .setColor('#08b9bf')\n            .setFooter({ text: `Current player: ${this.currentPlayer()?.username}` })\n            .setTitle('TicTacToe')\n            .setDescription(`[Click here to learn how to play](https://gameboardswebsite.lockdownammo7.repl.co/docs/#ttt)`)\n            .setTimestamp()\n\n        return {\n            embeds: [embed],\n            components: this.generateComponents()\n        }\n    }\n\n    protected getGameOverContent(result: GameResult): GameContent {\n\n        const embed = new MessageEmbed()\n            .setColor('#08b9bf')\n            .setFooter({ text: `Whoops something overflowed :D` })\n            .setTitle('TicTacToe')\n            .setDescription(`GAME OVER \\n ${this.getWinnerText(result)}`)\n            .setTimestamp()\n\n        return {\n            embeds: [embed],\n            components: this.generateComponents()\n        }\n    }\n\n    public onInteraction(interaction: Interaction<CacheType>): void {\n        if (!interaction.isButton())\n            return;\n        if (!interaction.customId.startsWith('ttt'))\n            return;\n        if (interaction.user.id != this.currentPlayer()?.id)\n            return;\n\n        const id = parseInt(interaction.customId.split('ttt')[1])\n        const y = Math.floor((id - 1) / 3);\n        const x = id - (y * 3) - 1;\n        this.gameBoard[y][x] = this.currentPlayerState();\n\n        if (this.hasWon(this.currentPlayerState())) {\n            this.gameOver({ result: ResultType.WINNER, name: this.currentPlayer()?.id });\n            return;\n        }\n        if (this.isBoardFull()) {\n            this.gameOver({ result: ResultType.TIE });\n            return;\n        }\n        this.step(false);\n        this.player1Turn = !this.player1Turn\n        interaction.update(this.getContent()).catch(e => this.handleError(e, 'update interaction'));\n    }\n\n    private currentPlayer(): User | null {\n        return this.player1Turn ? this.gameStarter : this.player2;\n    }\n\n    private currentPlayerState(): number {\n        return this.player1Turn ? 1 : 2;\n    }\n\n    private currentPlayerStateSymbol(n: number): string {\n        return n == 0 ? '\u3164' : (n == 1 ? 'X' : 'O');\n    }\n\n    private currentPlayerStateStyle(n: number): MessageButtonStyles {\n        return n == 0 ? MessageButtonStyles.SECONDARY : (n == 1 ? MessageButtonStyles.DANGER : MessageButtonStyles.SUCCESS);\n    }\n\n    private currentPlayerStateDisabled(n: number): boolean {\n        return this.won ? true : (n == 0 ? false : true);\n    }\n\n    private hasWon(player: number): boolean {\n      this.won = true;\n        if (this.gameBoard[0][0] == this.gameBoard[1][1] && this.gameBoard[0][0] == this.gameBoard[2][2] && this.gameBoard[0][0] == player) {\n            return true;\n        }\n        if (this.gameBoard[0][2] == this.gameBoard[1][1] && this.gameBoard[0][2] == this.gameBoard[2][0] && this.gameBoard[0][2] == player) {\n            return true;\n        }\n        for (let i = 0; i < 3; ++i) {\n            if (this.gameBoard[i][0] == this.gameBoard[i][1] && this.gameBoard[i][0] == this.gameBoard[i][2] && this.gameBoard[i][0] == player) {\n                return true;\n            }\n\n            if (this.gameBoard[0][i] == this.gameBoard[1][i] && this.gameBoard[0][i] == this.gameBoard[2][i] && this.gameBoard[0][i] == player) {\n                return true;\n            }\n        }\n      this.won = false;\n        return false;\n    }\n\n    private isBoardFull(): boolean {\n        for (let y = 0; y < 3; y++)\n            for (let x = 0; x < 3; x++)\n                if (this.gameBoard[y][x] == 0)\n                    return false;\n        return true;\n\n    }\n\n    private generateComponents(): MessageActionRow[] {\n        let rows: MessageActionRow[] = [];\n        for (let y = 0; y < 3; y++) {\n            const row = new MessageActionRow();\n            for (let x = 0; x < 3; x++) {\n                row.addComponents(\n                    {\n                        type: MessageComponentTypes.BUTTON,\n                        customId: `ttt${y * 3 + x + 1}`,\n                        label: this.currentPlayerStateSymbol(this.gameBoard[y][x]),\n                        style: this.currentPlayerStateStyle(this.gameBoard[y][x]),\n                        disabled: this.currentPlayerStateDisabled(this.gameBoard[y][x])\n                    }\n                )\n            }\n            rows = [...rows, row]\n        }\n        return [...rows];\n    }\n}"],
  "mappings": "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",
  "names": []
}
