{
  "version": 3,
  "sources": ["../../../src/games/2048.ts"],
  "sourcesContent": ["import { CacheType, Interaction, MessageEmbed } from \"discord.js\";\nimport GameBase from \"../classes/gameBase\";\nimport { Direction, oppositeDir } from \"../interfaces/direction\";\nimport { GameContent } from \"../interfaces/gameContent\";\nimport GameResult, { ResultType } from \"../interfaces/gameResult\";\nimport Position, { isInside, move, posEqual } from \"../interfaces/position\";\n\nconst HEIGHT = 4;\nconst WIDTH = 4;\n\nexport default class TwentFortyEight extends GameBase {\n    gameBoard: number[];\n    mergedPos: Position[];\n    mergedNum: number;\n    score: number;\n\n    constructor() {\n        super('2048', false);\n        this.gameBoard = [];\n        this.mergedPos = [];\n        this.score = 0;\n        this.mergedNum = 1;\n        for (let y = 0; y < HEIGHT; y++)\n            for (let x = 0; x < WIDTH; x++)\n                this.gameBoard[y * WIDTH + x] = 0;\n        this.placeNewRandTile();\n    }\n\n    protected getContent(): GameContent {\n        const row = this.createMessageActionRowButton([['2048left', '\u2B05\uFE0F'], ['2048up', '\u2B06\uFE0F'], ['2048right', '\u27A1\uFE0F'], ['2048down', '\u2B07\uFE0F']])\n        const embed = new MessageEmbed()\n            .setColor('#08b9bf')\n            .setFooter({ text: `Current player: ${this.gameStarter.username}` })\n            .setTitle('2048 or TwentyFortyEight')\n            .setDescription(`[Click here to learn how to play](https://gameboardswebsite.lockdownammo7.repl.co/docs/#2048)`)\n            .setImage(`https://gameboardswebsite.lockdownammo7.repl.co/gameBot/2048?gb=${this.gameBoardToString()}`)\n            .addField('Score:', this.score.toString())\n            .setTimestamp()\n        return {\n            embeds: [embed],\n            components: [row]\n        }\n    }\n\n    protected getGameOverContent(result: GameResult): GameContent {\n        const embed = new MessageEmbed()\n            .setColor('#f2e641')\n            .setTitle('2048 or TwentyFortyEight')\n            .setFooter({ text: \"Whoops something overflowed :D\"})\n            .setDescription(`GAME OVER!\\n${this.getWinnerText(result)}\\n\\nScore: ${this.score}`)\n            .setImage(`https://gameboardswebsite.lockdownammo7.repl.co/gameBot/2048?gb=${this.gameBoardToString()}`)\n            .setTimestamp()\n        return {\n            embeds: [embed],\n            components: []\n        }\n    }\n\n    private placeNewRandTile(): void {\n        let newPos = { x: 0, y: 0 };\n        do {\n            newPos = { x: Math.floor(Math.random() * WIDTH), y: Math.floor(Math.random() * HEIGHT) };\n        } while (this.gameBoard[newPos.y * HEIGHT + newPos.x] != 0);\n\n        \n        this.gameBoard[newPos.y * HEIGHT + newPos.x] = (Math.random() * 100) < 25 ? 2 : 1;\n    }\n    private gameBoardToString(): String {\n        return this.gameBoard.join(',');\n    }\n\n    private moveLeft(): boolean {\n        let moved = false;\n        for (let y = 0; y < HEIGHT; y++)\n            for (let x = 1; x < WIDTH; x++)\n                moved = this.move({ x, y }, Direction.LEFT) || moved;\n        return moved;\n    }\n    private moveUp(): boolean {\n        let moved = false;\n        for (let y = 1; y < HEIGHT; y++)\n            for (let x = 0; x < WIDTH; x++)\n                moved = this.move({ x, y }, Direction.UP) || moved;\n        return moved;\n    }\n    private moveRight(): boolean {\n        let moved = false;\n        for (let y = 0; y < HEIGHT; y++)\n            for (let x = WIDTH - 2; x >= 0; x--)\n                moved = this.move({ x, y }, Direction.RIGHT) || moved;\n        return moved;\n    }\n    private moveDown(): boolean {\n        let moved = false;\n        for (let y = HEIGHT - 2; y >= 0; y--)\n            for (let x = 1; x < WIDTH; x++)\n                moved = this.move({ x, y }, Direction.DOWN) || moved;\n        return moved;\n    }\n\n    private move(pos: Position, dir: Direction): boolean {\n        let moved = false;\n        const movingNum = this.gameBoard[pos.y * WIDTH + pos.x];\n        if (movingNum == 0)\n            return false;\n        let moveTo = pos;\n        let set = false;\n        while (!set) {\n            moveTo = move(moveTo, dir);\n            const i = this.gameBoard[moveTo.y * WIDTH + moveTo.x];\n            const movedToNum = i;\n            if (!isInside(moveTo, WIDTH, HEIGHT) || (movedToNum != 0 && movedToNum != movingNum) || !!this.mergedPos.find(p => p.x == moveTo.x && p.y == moveTo.y)) {\n                const oppDir = oppositeDir(dir);\n                const moveBack = move(moveTo, oppDir);\n\n                if (!posEqual(moveBack, pos)) {\n                    this.gameBoard[pos.y * WIDTH + pos.x] = 0;\n                    this.gameBoard[moveBack.y * WIDTH + moveBack.x] = movingNum;\n                    moved = true;\n                }\n                set = true;\n            } else if (movedToNum == movingNum) {\n                this.gameBoard[moveTo.y * WIDTH + moveTo.x] += 1;\n                this.score += Math.floor(Math.pow(this.gameBoard[moveTo.y * WIDTH + moveTo.x], 2));\n                this.gameBoard[pos.y * WIDTH + pos.x] = 0;\n                moved = true;\n                set = true;\n                this.mergedNum = this.gameBoard[moveTo.y * WIDTH + moveTo.x]\n                this.mergedPos = [...this.mergedPos, moveTo]\n            }\n        }\n        return moved;\n    }\n\n    private isBoardFull(): boolean {\n        for (let y = 0; y < HEIGHT; y++)\n            for (let x = 0; x < WIDTH; x++)\n                if (this.gameBoard[y * WIDTH + x] === 0)\n                    return false;\n        return true;\n    }\n\n    private possibleMoves(): number {\n        let numMoves = 0;\n        for (let y = 0; y < HEIGHT; y++) {\n            for (let x = 0; x < WIDTH; x++) {\n                const pos = { x, y };\n                const posNum = this.gameBoard[pos.y * WIDTH + pos.x];\n                [Direction.DOWN, Direction.LEFT, Direction.RIGHT, Direction.UP].forEach(dir => {\n                    const newPos = move(pos, dir);\n                    const numPos = this.gameBoard[newPos.y * WIDTH + newPos.x]\n                    if (isInside(newPos, WIDTH, HEIGHT) && (numPos === 0 || numPos === posNum))\n                        numMoves++;\n                });\n            }\n        }\n        return numMoves;\n    }\n\n    public onInteraction(interaction: Interaction<CacheType>): void {\n        if (!interaction.isButton())\n            return;\n        if (!interaction.customId.startsWith('2048'))\n            return;\n        let moved = false;\n        this.mergedPos = [];\n\n        switch (interaction.customId.split('2048')[1].toLowerCase()) {\n            case 'left':\n                moved = this.moveLeft();\n                break;\n            case 'up':\n                moved = this.moveUp();\n                break;\n            case 'right':\n                moved = this.moveRight();\n                break;\n            case 'down':\n                moved = this.moveDown();\n                break;\n        }\n      \n        if (moved)\n            this.placeNewRandTile();\n        this.step(false);\n        if(this.mergedNum >= 10)\n            this.gameOver({ result: ResultType.WINNER, name: this.gameStarter.id, score: `${this.score}` })\n        else if (this.isBoardFull() && this.possibleMoves() <= 0)\n            this.gameOver({ result: ResultType.LOSER, name: this.gameStarter.id, score: `${this.score}` }, interaction);\n        else\n            interaction.update(this.getContent()).catch(e => this.handleError(e, 'update interaction'));\n    }\n}"],
  "mappings": "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",
  "names": []
}
