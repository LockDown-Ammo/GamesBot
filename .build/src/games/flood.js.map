{
  "version": 3,
  "sources": ["../../../src/games/flood.ts"],
  "sourcesContent": ["import { GameContent } from \"../interfaces/gameContent\";\r\nimport GameResult, { ResultType } from \"../interfaces/gameResult\";\r\nimport GameBase from \"../classes/gameBase\";\r\nimport Position, { up, down, left, right, isInside } from \"../interfaces/position\";\r\nimport Discord, { MessageActionRow, MessageButton, MessageEmbed } from \"discord.js\";\r\n\r\nconst HEIGHT = 13\r\nconst WIDTH = 13\r\n\r\nconst SQUARES = {\r\n    'red_square': '\uD83D\uDFE5',\r\n    'blue_square': '\uD83D\uDFE6',\r\n    'orange_square': '\uD83D\uDFE7',\r\n    'purple_square': '\uD83D\uDFEA',\r\n    'green_square': '\uD83D\uDFE9'\r\n}\r\n\r\nexport default class FloodGame extends GameBase {\r\n    gameBoard: string[];\r\n    turn: number;\r\n\r\n    constructor() {\r\n        super('flood', false)\r\n        this.gameBoard = []\r\n        for (let y = 0; y < HEIGHT; y++) {\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                this.gameBoard[y * WIDTH + x] = Object.values(SQUARES)[Math.floor(Math.random() * Object.keys(SQUARES).length)];\r\n            };\r\n        };\r\n        this.turn = 1;\r\n    }\r\n\r\n    private gameBoardToString(): string {\r\n        let str: string = '';\r\n        for (let y = 0; y < HEIGHT; y++) {\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                str += this.gameBoard[y * WIDTH + x]\r\n            }\r\n            str += `\\n`;\r\n        }\r\n        return str;\r\n    }\r\n    protected getContent(): GameContent {\r\n        const row = new MessageActionRow()\r\n            .addComponents(\r\n                ...Object.entries(SQUARES).map(([k, v]) => new MessageButton()\r\n                    .setCustomId(k)\r\n                    .setEmoji(v)\r\n                    .setStyle(Discord.Constants.MessageButtonStyles.SECONDARY)\r\n                )\r\n            )\r\n        const embed = new MessageEmbed()\r\n            .setColor('#08b9bf')\r\n            .setTitle('Flood Game')\r\n            .setFooter({ text: `Current player: ${this.gameStarter.username}`, iconURL: this.gameStarter.displayAvatarURL({ dynamic: false }) })\r\n            .setDescription(`[Click here to learn how to play](https://gameboardswebsite.lockdownammo7.repl.co/docs/#flood-game)\r\n            \\n` +this.gameBoardToString())\r\n            .addField('Turn:', this.turn.toString())\r\n            .setTimestamp();\r\n        return {\r\n            embeds: [embed],\r\n            components: [row]\r\n        }\r\n    }\r\n    protected getGameOverContent(result: GameResult): GameContent {\r\n        const turnResp = result.result == ResultType.WINNER ? `Game beat in ${this.turn - 1} turns :D` : ''\r\n        const embed = new Discord.MessageEmbed()\r\n            .setColor('#08b9bf')\r\n            .setTitle('Flod Game')\r\n            .setFooter({ text: \"Whoops something overflowed :D\" })\r\n            .setDescription(`GAME OVER\\n${turnResp}\\n${this.getWinnerText(result)}`)\r\n            .setTimestamp()\r\n        return {\r\n            embeds: [embed],\r\n            components: []\r\n        }\r\n    }\r\n    public onInteraction(interaction: Discord.Interaction<Discord.CacheType>): void {\r\n        if (!interaction.isButton()) return;\r\n        if(interaction.user.id !== this.gameStarter.id) return;\r\n\r\n        const selected = Object.entries(SQUARES).find(([k, v]) => k === interaction.customId);\r\n        const current = this.gameBoard[0]\r\n\r\n        if (selected && selected[1] !== current) {\r\n            this.turn += 1;\r\n            let queue: Position[] = [{ x: 0, y: 0 }]\r\n            let visited: Position[] = []\r\n\r\n            while (queue.length > 0) {\r\n                const pos: Position | undefined = queue.shift();\r\n                if (!pos || visited.some(p => p.x === pos.x && p.y === pos.y)) continue;\r\n\r\n                visited.push(pos)\r\n                if (this.gameBoard[pos.y * WIDTH + pos.x] === current) {\r\n                    this.gameBoard[pos.y * WIDTH + pos.x] = selected[1];\r\n\r\n                    [up(pos), down(pos), left(pos), right(pos)].forEach(checkPos => {\r\n                        if (!visited.some(p => p.x === checkPos.x && p.y === checkPos.y) && isInside(checkPos, WIDTH, HEIGHT))\r\n                            queue.push(checkPos);\r\n                    })\r\n                }\r\n            }\r\n\r\n            let gameOver = true;\r\n            for(let y = 0; y < HEIGHT; y++){\r\n                for(let x = 0; x < WIDTH; x++){\r\n                    if(this.gameBoard[y * WIDTH + x] !== selected[1])\r\n                        gameOver = false;\r\n                }\r\n            }\r\n            if (gameOver)\r\n                this.gameOver({ result: ResultType.WINNER, score: (this.turn - 1).toString(), name: this.gameStarter.id }, interaction);\r\n            else\r\n                super.step(false);\r\n        }\r\n        if(this.isInGame())\r\n            interaction.update(this.getContent()).catch(e => super.handleError(e, 'update interaction'));\r\n        else if(!this.result)\r\n            this.gameOver({ result: ResultType.ERROR }, interaction);\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
