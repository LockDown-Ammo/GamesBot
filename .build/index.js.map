{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import Discord, { Intents, Client, Snowflake, Interaction, Message, PartialMessage, Collection, User, MessageEmbed } from 'discord.js';\r\nimport dotenv from 'dotenv';\r\nimport { readdirSync, Dirent } from 'fs';\r\nimport GameBase from './src/classes/gameBase';\nimport TicTacToeGame from './src/games/ttt'\nimport TwentyFortyEightGame from './src/games/2048'\r\nimport BreakLockGame from './src/games/breaklock';\r\nimport Connect4Game from './src/games/connect4';\r\nimport FloodGame from './src/games/flood';\r\nimport GameResult, { ResultType } from './src/interfaces/gameResult';\nimport { exec } from 'child_process'\r\nconst client: Client = new Client({\r\n  intents: [\r\n    Intents.FLAGS.GUILDS,\r\n    Intents.FLAGS.GUILD_MEMBERS,\r\n    Intents.FLAGS.GUILD_MESSAGES,\r\n    Intents.FLAGS.GUILD_MESSAGE_REACTIONS\r\n  ]\r\n});\r\n\r\ntype CommandObject = {\r\n  [key: string]: () => GameBase;\r\n}\r\nconst commandGameMap: CommandObject = {\r\n  'flood': () => new FloodGame(),\r\n  'connect4': () => new Connect4Game(),\r\n  'breaklock': () => new BreakLockGame(),\n  '2048': () => new TwentyFortyEightGame(),\n  'ttt': () => new TicTacToeGame()\r\n}\r\nconst playerGameMap = new Map<Snowflake, Map<Snowflake, GameBase>>();\r\n\r\nclient.on('ready', () => {\r\n  console.log('Games Bot is online!');\n  client.user?.setActivity('>>help', { type: 'LISTENING' });\r\n})\r\n\r\nclient.on('debug', (m) => {\n  // exec('sh rateLimited.sh ./');\n  if (!m.startsWith('[WS => Shard 0] Heartbeat') && !m.startsWith('[WS => Shard 0] [Heartbeat'))\n    console.log(m)\n})\n\nclient.on('rateLimit', (rlInfo) => {\n  console.log(\n    rlInfo,\n    `\\nTimeout: ${rlInfo.timeout}\\n`,\n    `Limit: ${rlInfo.limit}\\n`,\n    `HTTP Method: ${rlInfo.method}\\n`,\n    `Path: ${rlInfo.path}\\n`,\n    `Route: ${rlInfo.route}\\n`,\n    `Global: ${rlInfo.global}\\n`\n  )\n})\n\nclient.on('shardDisconnect', (closeEvent, shardId) => {\n  console.log(\n    `Shard of id ${shardId} has been disconnected and wont reconnect\\n`,\n    `Code: ${closeEvent.code}\\n`,\n    `Reason: ${closeEvent.reason}\\n`,\n    `Target: ${closeEvent.target}\\n`,\n    `Clean: ${closeEvent.wasClean}\\n`,\n    closeEvent\n  )\n})\nclient.on('shardError', (e, id) => {\n  console.error(`Shard ${id} encountered an error\\n`, e);\n})\nclient.on('shardReady', (id, ignored) => {\n  console.log(`Shard ${id} is ready !!`)\n})\nclient.on('shardReconnecting', (id) => {\n  console.log(`Shard ${id} is reconnecting...`)\n})\nclient.on('shardResume', (id, replayedEvents) => {\n  console.log(`Shard ${id} has been resumed.\\n`, `Replayed Events: ${replayedEvents}`)\n})\nclient.on('invalidRequestWarning', (req) => {\n  console.log(\n    `Invalid Request was sent...\\n`,\n    `Invalid req remaining: ${req.count}\\n`,\n    `Time remaining: ${req.remainingTime}\\n`,\n    req\n  )\n})\n/*\nclient.on('apiRequest', (req) => {\n  console.log(\n    `API request data (Test purposes)\\n`,\n    req\n  )\n})\nclient.on('apiResponse', (req, res) => {\n  console.log(\n    `API request data (Test purposes)\\n`,\n    req,\n    `Response: \\n`,\n    res\n  )\n})\n*/\n/*client.on('invalidated', () => {\n  console.log('Sessioin Expired....')\n})*/\r\n\r\nclient.on('interactionCreate', (interaction: Interaction) => {\r\n  const userGame = getPlayersGame(interaction.guild?.id as Snowflake, interaction.user?.id as Snowflake);\r\n\r\n  if (interaction.isCommand()) return;\r\n\r\n  if (!userGame) return;\r\n\r\n  userGame.onInteraction(interaction);\r\n})\r\n\r\nclient.on('messageDelete', (message: Message | PartialMessage) => {\r\n  handleMessageDelete(message.guild?.id, message.id);\r\n})\r\n\r\nclient.on('messageDeleteBulk', (messages: Collection<string, Message | PartialMessage>) => {\r\n  messages.forEach((message: Message | PartialMessage) => handleMessageDelete(message.guild?.id, message.id));\r\n});\r\n\r\nclient.on('messageCreate', (message: Message) => {\r\n  const prefix = process.env.PREFIX as string;\r\n  if (!message.guild || !message.content.startsWith(prefix)) return;\r\n  const games: string[] = []\r\n  const suffix = '.ts'\r\n  const gameFiles: Dirent[] = readdirSync('./src/games/', { withFileTypes: true })\r\n  for (const game of gameFiles) {\r\n    games.push(game.name.slice(0, -3))\r\n  }\r\n  const userGame = getPlayersGame(message.guild?.id as Snowflake, message.author?.id as Snowflake);\r\n  const guildId = message.guild?.id as Snowflake\r\n  const userId = message.author?.id as Snowflake\r\n  const command = games.find(g => g == message.content.slice(prefix.length).split(/ +/).shift()!.toLowerCase())\r\n  if (message.content.slice(prefix.length).split(/ +/).shift()!.toLowerCase() == 'help') {\r\n    const em = new MessageEmbed()\r\n      .setTitle(\"GameBot Help\")\r\n      .setDescription(`[Check documentations here](https://gameboardswebsite.lockdownammo7.repl.co/docs/) or visit https://gameboardswebsite.lockdownammo7.repl.co/docs/ \\n`)\r\n      .addFields([\r\n        {\r\n          name: '\uD83C\uDF0A Flood Game',\r\n          value: '>>flood'\r\n        },\r\n        {\r\n          name: '\uD83D\uDFE1 Connect 4',\r\n          value: '>>connect4'\r\n        },\r\n        {\r\n          name: '\uD83D\uDD13 Break Lock',\r\n          value: '>>breaklock'\r\n        },\n        {\n          name: '2\uFE0F\u20E3 2048',\n          value: '>>2048'\n        },\n        {\n          name: '\u274C TicTacToe',\n          value: '>>ttt'\n        }\r\n      ])\r\n    message.reply({ embeds: [em] })\r\n  }\r\n  if (!command || !userId)\r\n    return;\r\n  if (Object.keys(commandGameMap).includes(command)) {\r\n    const game = commandGameMap[command]();\r\n\r\n    const player2Option = message.mentions.users.first()\r\n    let player2: User | undefined;\r\n    if (player2Option) {\r\n      if (!game.doesSupportMultiplayer()) {\r\n        message.reply('Sorry this game does not support multiplayer');\r\n        return;\r\n      } else {\r\n        player2 = message.guild.members.cache.find(m => m.user.id == player2Option.id)?.user as User\r\n        const player2Id = player2.id\r\n      }\r\n    } else if (game.doesSupportMultiplayer()) {\r\n      message.reply('This game can be played only in multiplayer !!');\r\n      return;\r\n    }\r\n    if (userId === player2?.id) {\r\n      message.reply('Srsly, playing with yourself? I am sad that ypu have no friends...').catch(console.log);\r\n      return;\r\n    }\r\n    if (!playerGameMap.has(guildId)) {\r\n      playerGameMap.set(guildId, new Map<Snowflake, GameBase>())\r\n    }\r\n    if (userGame) {\r\n      message.reply('Whoa whoa pls finish your other game first... (Think this is a mistake? Uh well maybe ur record didnt get cleared)').catch(console.log);\r\n      return;\r\n    }\r\n    else if (player2 && playerGameMap.get(guildId)?.has(player2.id)) {\r\n      message.reply('Whoa whoa let them finish their game... (Think this is a mistake? Uh well maybe their record didnt get cleared)').catch(console.log);\r\n      return;\r\n    }\r\n    const foundGame = Array.from(playerGameMap.get(guildId)?.values() ?? []).find(g => g.getGameId() === game.getGameId());\r\n    if (foundGame !== undefined && foundGame.isInGame()) {\r\n      message.reply({ content: 'Sorry, there can only be 1 instance of a game at a time!' }).catch(console.log);\r\n      return;\r\n    }\r\n    game.newGame(message, player2 ?? null, (result: GameResult) => {\r\n      playerGameMap.get(guildId)?.delete(userId);\r\n      if (player2)\r\n        playerGameMap.get(guildId)?.delete(player2.id);\r\n    });\r\n    playerGameMap.get(guildId)?.set(userId, game);\r\n    if (player2)\r\n      playerGameMap.get(guildId)?.set(player2.id, game);\r\n  }\r\n})\r\n\r\nconst handleMessageDelete = (guild_id: Snowflake | undefined, message_id: Snowflake) => {\r\n  if (!guild_id)\r\n    return;\r\n\r\n  const guidGames = playerGameMap.get(guild_id);\r\n  if (!guidGames)\r\n    return;\r\n\r\n  guidGames.forEach((game: GameBase, userId: Snowflake) => {\r\n    if (game.getMessageId() === message_id)\r\n      game.gameOver({ result: ResultType.DELETED });\r\n  });\r\n};\r\nconst getPlayersGame: any = (guildId: Snowflake | null, userId: Snowflake): GameBase | null => {\r\n  if (!guildId)\r\n    return null;\r\n\r\n  const guidGames = playerGameMap.get(guildId);\r\n  if (!guidGames)\r\n    return null;\r\n\r\n  const userGame = guidGames.get(userId);\r\n  if (!userGame)\r\n    return null;\r\n\r\n  return userGame;\r\n};\r\n\r\nclient.login(process.env.TOKEN)\n\nimport express from 'express'\nconst app = express()\n\n\napp.get('/', (req: any, res: any) => res.send('Your computer has a virus ~ Tech Support'))\napp.listen(3000)"],
  "mappings": "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",
  "names": []
}
